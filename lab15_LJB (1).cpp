/////////////////////////////////////////////////////////////////////
//
// Name: Landon Burn
// Date: 4/5/2022
// Class: CSCI 1170.03
// Semester: Spring
// CSCI/CMPE 1370 Instructor: Gustavo Dietrich
//
// 
// 
//
/////////////////////////////////////////////////////////////////////

#include<iostream>
#include<string>
#include<cstdlib>
#include<time.h>

// Function prototypes
int randNumGen(int upper, int lower);
int getSeed();
void guessNumber();
void pigRoll();

using namespace std;

int main()
{
	guessNumber();
	// Pause the execution of the program
	cout << "Press Enter to continue ...";
	cin.sync();
	cin.ignore();
	cin.get();
	// Clear the screen
	system("cls");
	pigRoll();
	return 0;
}

//************************  Function definitions  *************************
// Read the handout carefully for detailed description of the functions that you have to implement

// This function generates a random number within a specified range.
// It receives two whole numbers : the first one is the upper boundary and
// the second one is the lower boundary used to generate the random number.
// Returns the random number generated using expression 2) on my handout

int randNumGen(int upper, int lower){	// function heading
									
return ( rand() % (upper - lower + 1) ) + lower;

	
}

// This function prompts the user to enter a seed (a whole number) equal to zero (0) or 
// within the range 1000..4000. If the user enters a valid value the function returns 
// the value. Otherwise it keeps asking for the seed.
// Use a DO-WHILE-LOOP to implement this function

int getSeed()
{
	// Declare variable seed
	// 
	// Use a Do-While-Loop to ensure the user enters a valid seed
  int seed;
  cin >> seed;
  do {
    if (!((seed >= 1000) && (seed <= 4000)) && (!(seed == 0))){
cout << endl << "Sorry, but your seed is invalid" << endl << endl << "Enter a seed equal to 0 or within the range 1000-4000:";
      cin >> seed;
    }
    
    } while (!((seed >= 1000) && (seed <= 4000)) && (!(seed == 0)));

	// Return the seed
	return seed;
}

// This function generates a number and gives the user five chances to guess it.
// As the user provides a guess the program indicates whether the guess was correct
// or if it was too low or too high to help her/him.
// If the user runs out of guesses it shows her/him the number
// MUST use a FOR-LOOP to implement this function

void guessNumber()
{
	// Declare variable num to hold the random number generated by the program
int num;
	// Declare variable seed to get the seed specified by the user
int seed;
	// Declare variable guess to hold the user's guess
int guess;
	// Declare variable i to control the counter-controlled loop
	int i;
	// Display the title with the instructions for the guessing game
	cout << "Thank you for participating in the Guessing Game" << endl << endl;
	cout << "If you want me to create a real random number enter 0 when prompted for the seed please." << endl;
	cout << "Otherwise enter a number within the specified range please." << endl << endl;
	// Call function getSeed() to get the seed from the user and assign it to the corresponding variable
 cout << "Enter a seed equal to 0 or within the range 1000-4000: ";
  seed = getSeed();
	// If the user entered a zero (0) use srand(static_cast<int> (time(NULL))) to seed
	// the random number generator. Otherwise use srand(seed) where seed represents the value entered by the user

if (seed == 0){
srand(static_cast<int> (time(NULL)));
  }
else {

srand(seed);
  
}
  
num = randNumGen(100, 0);
  
  
	// Use a For-Loop to give the user five (5) chances to guess the number
for (i =0; i <= 5; i++){

cout << endl << "Guess the number the computer randomly picked between 1 - 100: ";
  cin >> guess;



		// Check if the user has guessed the correct number.
		// If not, tell her/him if his guess is too low or too high
		// If the guess is smaller than the number
if (num > guess){

  
  


			// Display "sorry, your guess is too low"
cout << "sorry, your guess is too low";
		// Otherwise, if the guess is bigger than the number
  cout << endl << endl;
  }

else if(num < guess) {

			// Display "sorry, your guess is too high"

cout << "sorry, your guess is too high";
    cout << endl << endl;
    }
		// Otherwise
else {

			// Display "you guessed right, you win!"
cout << "you guessed right, you win!" << endl << endl;
  break;
			// Exit the loop
  }
  }

	// If the user lost
if (i == 6){

		// Display message "Sorry, you lost. The number is: ", num
 cout << "Sorry, you lost. The number is: " << num << endl << endl;

  }
  
}

// This function simulates the pig dice game.Version 1.2
// It simulates a computer controlled player by rolling a die
// numbered 1 through 6 until the total_turn number is greater
// than 20 or until it rolls a 1. Once the computer finishes its
// turn, the function terminates.

void pigRoll()
{
	// Declare variable roll to hold the die roll
int roll;
	// Declare variable total_turn to hold the player's score for this turn and initialize it to zero
int total_turn = 0;
	// Declare variable lowRange to hold the lower boundary of the range for the die roll and initialize it to 1
int lowRange = 1;
	// Declare variable highRange to hold the upper boundary of the range for the die roll and initialize it to 6
int highRange = 6;
	// Seed the random number generator
srand(static_cast<int> (time(NULL)));
	// Display title "Welcome to the Pig Roll game"
cout << "Welcome to the Pig Roll game" << endl << endl;
	/*
	the computer rolls the dice until the total turn number is
	20 or greater than 20 or it rolls a 1. if a 1 is rolled the
	computer gets a 0 for the turn.
	*/
	//While the player's score for this turn is below 20
while (total_turn < 20){

		//Display "it's the computer's turn to roll . . . "
cout << "it's the computer's turn to roll . . . " << endl;
		//Simulate the single die roll between 1 and 6:
		// Generate a random number between 1 and 6 and assign it to roll
roll = randNumGen(6, 1);
		//If roll is a 1
if (roll == 1){

			//Display "computer rolled a 1, it's turn is over."
cout << "computer rolled a 1, it's turn is over." << endl << endl;
			//Set the player's score for this turn to 0
total_turn = 0;
			//Exit the loop
  break;
  }

		//otherwise
else {

			//Display "computer rolled a ", roll
cout << "computer rolled a " << roll << endl;
			//Accumulate the player's score for this turn by adding it the roll
total_turn = total_turn + roll;
			//Display "Current total for the turn = ", total_turn

cout << "Current total for the turn = " << total_turn << endl << endl;
  }
  }

	//Output the number of points the computer got for the turn:
	//Display "computer has completed its turn.\n"
cout << "computer has completed its turn.\n";
	//Display "computer got ", total_turn, " points for the turn."
cout << "computer got " << total_turn << " points for the turn.";

}